service:
  name: Note-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation


provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    NOTE_TABLE: Note-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    NOTE_S3_BUCKET: note-attachment-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3000

iamRoleStatements:
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Note-APP API
        description: Serverless application for Note-APP
    models:
      - name: CreateNoteItemRequest
        contentType: "application/json"
        schema:
          required:
            - name
            - dueDate
          properties:
            name:
              type: string
            dueDate:
              type: string
        
      - name: UpdateNoteItemRequest
        contentType: "application/json"
        schema:
          required:
            - name
            - dueDate
            - done
          properties:
            name:
              type: string
            dueDate:
              type: string
            done:
              type: boolean
           

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetNote:
    handler: src/lambda/http/getNote.handler
    events:
      - http:
          method: get
          path: notes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"


  CreateNote:
    handler: src/lambda/http/createNote.handler
    events:
      - http:
          method: post
          path: notes
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new note
            description: Create a new note
            requestModels:
              'application/json': CreateNoteItemRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UpdateNote:
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          method: patch
          path: notes/{itemId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing note
            description: Update an existing note
            requestModels:
              'application/json': UpdateNoteItemRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  DeleteNote:
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          method: delete
          path: notes/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: notes/{itemId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
       - Effect: Allow
         Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
         Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTE_TABLE}
       - Effect: Allow
         Action:
          - s3:PutObject
          - s3:GetObject
         Resource: arn:aws:s3:::${self:provider.environment.NOTE_S3_BUCKET}/*
       - Effect: Allow
         Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
         Resource:
          - "*"


resources:
  Resources:

    NoteDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.NOTE_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    NoteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.NOTE_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.NOTE_S3_BUCKET}/*'
        Bucket: !Ref NoteBucket


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
